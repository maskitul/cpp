foodX = rand() % PLANEWIDTH;
        foodY = rand() % PLANEHEIGHT;
    }

    plane[ foodY * PLANEWIDTH + foodX ] = 'X';
}
void Move()
{
    if( lastDirection == 'd' )
    {
        SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 );
        segment.x++;
        m_Snake.push_back( segment );
        plane[ segment.y * PLANEWIDTH + segment.x ] = 'O';

        DeleteLastSnakeSegment();
    }
    else if( lastDirection == 's' )
    {
        SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 );
        segment.y++;
        m_Snake.push_back( segment );
        plane[ segment.y * PLANEWIDTH + segment.x ] = 'O';

        DeleteLastSnakeSegment();
    }
    else if(lastDirection == 'a')
    {
        SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 );
        segment.x--;
        m_Snake.push_back( segment );
        plane[ segment.y * PLANEWIDTH + segment.x ] = 'O';

        DeleteLastSnakeSegment();
    }
    else if( lastDirection == 'w' )
    {
        SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 );
        segment.y--;
        m_Snake.push_back( segment );
        plane[ segment.y * PLANEWIDTH + segment.x ] = 'O';

        DeleteLastSnakeSegment();
    }
}
void DeleteLastSnakeSegment()
{
    SnakeSegment temp = m_Snake[ 0 ];
    plane[ temp.y * PLANEWIDTH + temp.x ] = ' ';
    m_Snake.erase( m_Snake.begin() ); //first is last
}
bool HasEatenFood()
{
    SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 ); //first element of snake
    SnakeSegment food;
    food.x = foodX;
    food.y = foodY;
    return segment.x == food.x && segment.y == food.y; //if his "head" collides with food cell
}
void WipeConsole()
{
    HANDLE hStdOut = GetStdHandle( STD_OUTPUT_HANDLE );
    COORD coord = { 0,0 };
    DWORD count;
    CONSOLE_SCREEN_BUFFER_INFO csbi;

    if( GetConsoleScreenBufferInfo( hStdOut,&csbi ) )
    {
        FillConsoleOutputCharacter( hStdOut,(TCHAR)32,csbi.dwSize.X * csbi.dwSize.Y,coord,&count );
        FillConsoleOutputAttribute( hStdOut,csbi.wAttributes,csbi.dwSize.X - 1 * csbi.dwSize.Y - 1,coord,&count );
        SetConsoleCursorPosition( hStdOut,coord );
    }
    return;
}
bool Won()
{
    bool space = false;
    for( unsigned short x = 0; x < PLANEWIDTH; x++ )
    {
        for( unsigned short y = 0; y < PLANEHEIGHT; y++ )
        {
            if( plane[ y * PLANEWIDTH + x ] == ' ' ) //if none of cells is empty we won
            {
                space = true;
                break;
            }
        }
    }
    return !space;
}
bool Lost()
{
    SnakeSegment segment = m_Snake.at( m_Snake.size() - 1 ); //first element of snake

    if( segment.x < 0 || segment.x > PLANEWIDTH - 1 ||
        segment.y < 0 || segment.y > PLANEHEIGHT - 1 ) return true; //if colides with boundries

    for( unsigned short i = 0; i < m_Snake.size() - 1; i++ ) //or with itself we return true
    {
        SnakeSegment temp = m_Snake[ i ];
        if( temp.x == segment.x && temp.y == segment.y ) return true;
    }

    return false;
}
